// Generated by CoffeeScript 1.10.0
var Kefir, didAuthenticate, didConnect, didConnectAuth, first_connect, reSubscribe, socket, subscriptions,
  slice = [].slice;

Kefir = require('kefir');

socket = io.connect();

exports.socket = socket;

exports.remote = function() {
  var args, cb, i, method, service;
  service = arguments[0], method = arguments[1], args = 4 <= arguments.length ? slice.call(arguments, 2, i = arguments.length - 1) : (i = 2, []), cb = arguments[i++];
  return socket.emit.apply(socket, ['remote', service, method].concat(slice.call(args), [cb]));
};

exports.remote$ = function() {
  var args, method, service;
  service = arguments[0], method = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
  return Kefir.stream(function(emitter) {
    return exports.remote.apply(exports, [service, method].concat(slice.call(args), [function(err, result) {
      if (err) {
        emitter.error(err);
      } else {
        emitter.emit(result);
      }
      return emitter.end();
    }]));
  });
};

subscriptions = {};

exports.subscribe = function(service, type, cb) {
  var base;
  subscriptions[service] || (subscriptions[service] = {});
  (base = subscriptions[service])[type] || (base[type] = []);
  subscriptions[service][type].push(cb);
  return socket.emit('subscribe', service, type);
};

exports.unsubscribe = function(service, type) {
  return socket.emit('unsubscribe', service, type);
};

exports.subscribe$ = function() {
  var args, method, service;
  service = arguments[0], method = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
  return Kefir.stream(function(emitter) {
    return exports.subscribe.apply(exports, [service, method].concat(slice.call(args), [function(result) {
      return emitter.emit(result);
    }]));
  });
};

socket.on('event', function(service, type, event) {
  var cbs, e, error, ref;
  if (cbs = (ref = subscriptions[service]) != null ? ref[type] : void 0) {
    try {
      return cbs.map(function(cb) {
        return cb(event);
      });
    } catch (error) {
      e = error;
      return console.error("[socket.on event] " + service + " " + type + " Error:", e.stack);
    }
  } else {
    return console.log("[socket.on event] No such subscription " + service + " " + type);
  }
});

first_connect = true;

reSubscribe = function() {
  var fns, results, service, type, types;
  if (first_connect) {
    return;
  }
  results = [];
  for (service in subscriptions) {
    types = subscriptions[service];
    results.push((function() {
      var results1;
      results1 = [];
      for (type in types) {
        fns = types[type];
        results1.push(socket.emit('subscribe', service, type));
      }
      return results1;
    })());
  }
  return results;
};

didConnect = function() {
  console.log('[didConnect] Connected...');
  socket.emit('hello');
  reSubscribe();
  return first_connect = false;
};

exports.connect = function(cb) {
  return socket.on('hello', didConnect);
};

didConnectAuth = function(token) {
  return function() {
    console.log('[didConnectAuthenticate] Connected...');
    return socket.emit('hello', token);
  };
};

didAuthenticate = function(cb) {
  return function(user) {
    console.log('[didAuthenticate] Authenticated as', user);
    if (first_connect) {
      cb(null, user);
    }
    reSubscribe();
    return first_connect = false;
  };
};

exports.authenticate = function(token, cb) {
  socket.on('hello', didConnectAuth(token));
  return socket.on('welcome', didAuthenticate(cb));
};
